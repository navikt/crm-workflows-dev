# Unique name for this workflow
name: "[Push] Create Package from Master"

# Definition when the workflow should run
on:
  push:
    branches:
      - master
    paths:
      - "force-app/**"

# Jobs to be executed
jobs:
  create-package:
    name: Create new package
    runs-on: ubuntu-latest
    steps:
      # Install Salesforce CLI
      - name: "Install Salesforce CLI" # TODO implement https://github.com/marketplace/actions/salesforce-sfdx-cli-action
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
          mkdir sfdx-cli
          tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
          ./sfdx-cli/install

      # Checkout the code in the pull request
      - name: "Checkout source code"
        uses: actions/checkout@v2

      # Store secret for dev hub
      - name: "Populate auth file with PROD_SFDX_URL secret"
        shell: bash
        run: "echo ${{ secrets.PROD_SFDX_URL}} > ./PROD_SFDX_URL.txt"

      # Store secret for package target org installation
      - name: "Populate auth file with INTEGRATION_SANDBOX_SFDX_URL secret"
        shell: bash
        run: "echo ${{ secrets.INTEGRATION_SANDBOX_SFDX_URL}} > ./INTEGRATION_SANDBOX_SFDX_URL.txt"

      # Authenticate dev hub
      - name: "Authenticate Dev Hub"
        run: "sfdx force:auth:sfdxurl:store -f ./PROD_SFDX_URL.txt -a devhub -d"

      # Authenticate integration sandbox
      - name: "Authenticate integration sandbox"
        run: "sfdx force:auth:sfdxurl:store -f ./INTEGRATION_SANDBOX_SFDX_URL.txt -a integration-sandbox -s"

      # Remove auth files
      - name: "Remove auth files"
        if: always()
        run: |
          rm -f ./PROD_SFDX_URL.txt
          rm -f ./INTEGRATION_SANDBOX_SFDX_URL.txt

      # Delete unpackagable
      - name: "Delete unpackagable"
        run: rm -rf unpackagable

      # Create package version
      - name: "Create package version"
        id: package-version-create
        run: |
          json=$(sfdx force:package:version:create -f config/project-scratch-def.json -p $(cat sfdx-project.json | jq '.packageDirectories[0].package' -r) -k ${{ secrets.PACKAGE_KEY }} -w 90 --json)
          echo $json
          echo "::set-output name=result::$(echo $json | jq -c .)"

          status=$(echo $json |jq '.status')
          if [ $status == "0" ]
          then
            echo "::set-output name=isSuccess::true"
          else
            echo "::set-output name=isSuccess::false"
          fi

      # Extract data from package version create result
      - name: "Extract package:version:create result data"
        id: extract-data-package-version-create
        uses: muenzpraeger/github-action-extract-sfdx-packaging-result@master
        with:
          json: ${{steps.package-version-create.outputs.result}}

      # Install new package version into integration org
      - name: "Install new package version into integration org"
        if: success() || (failure() && steps.extract-data-package-version-create.outputs.isSuccess)
        id: integration-installation
        run: |
          json=$(sfdx force:package:install --package ${{ steps.extract-data-package-version-create.outputs.packageVersionId }} -w 20 -b 20 -u integration-sandbox -r -k ${{ secrets.PACKAGE_KEY }} --json)
          echo $json

          status=$(echo $json |jq '.status')
          if [ $status == "0" ]
          then
            echo "::set-output name=isSuccess::true"
          else
            echo "::set-output name=isSuccess::false"
          fi

      # Fetch beta version number
      - name: "Fetch beta version number"
        if: success() || (failure() && steps.package-version-create.outputs.isSuccess)
        id: packaging-updater
        uses: muenzpraeger/github-action-sfdx-packaging-updater@master

      # set release variables
      - name: "Set release fields"
        if: success() || (failure() && steps.package-version-create.outputs.isSuccess)
        id: release-fields
        run: |
          versionNumber=$(cat sfdx-project.json | jq '.packageDirectories[0].versionNumber' -r | sed 's/.\{5\}$//')
          packageAliases=$(cat sfdx-project.json | jq '.packageAliases | keys_unsorted[-1]' -r | sed 's/.*-//')

          echo "::set-output name=tagName::v$(echo $versionNumber)-beta$(echo $packageAliases)"
          echo "::set-output name=releaseName::$(echo $versionNumber)-beta$(echo $packageAliases)"
          echo "::set-output name=bodyVersion::$(echo $versionNumber).$(echo $packageAliases)"
          echo "::set-output name=bodyPackage::${{ steps.extract-data-package-version-create.outputs.packageVersionId }}"

          echo "::set-output name=packageCreation::✅ Package Creation"

          if [ ${{ steps.integration-installation.outputs.isSuccess }} == "true" ]
          then
            echo "::set-output name=integrationInstallation::✅ Package Installation (Integration Sandbox)"
          else
            echo "::set-output name=integrationInstallation::❌ Package Installation (Integration Sandbox)"
          fi

      # Generate changelog from commits
      - name: Generate changelog
        if: success() || (failure() && steps.package-version-create.outputs.isSuccess)
        id: changelog
        uses: metcalfc/changelog-generator@v0.4.0
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      # create github release
      - name: "Create Release"
        if: success() || (failure() && steps.package-version-create.outputs.isSuccess)
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release-fields.outputs.tagName }}
          release_name: ${{ steps.release-fields.outputs.releaseName }}
          body: |
            **Version**: ${{ steps.release-fields.outputs.bodyVersion }}
            **Package ID**: ${{ steps.release-fields.outputs.bodyPackage }}
            **Author**: ${{ github.actor }}

            ${{ steps.release-fields.outputs.packageCreation }}
            ${{ steps.release-fields.outputs.integrationInstallation }}

            ## Changelog

            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: true
