# Unique name for this workflow
name: "[PR] Validate"

# Definition when the workflow should run
on:
  workflow_dispatch:
  pull_request:
    branches:
      - "*"

jobs:
  # ######################################## #
  # ############### COMPILE ################ #
  # ######################################## #
  compile:
    name: Compile Metadata
    runs-on: ubuntu-latest
    steps:
      # Install SFDX
      - name: Install SFDX
        uses: sfdx-actions/setup-sfdx@v1

      # Checkout the code in the pull request
      - name: "Checkout source code"
        uses: actions/checkout@v2

      # Authenticate dev hub
      - name: "Authenticate Dev Hub"
        run: |
          echo ${{ secrets.PROD_SFDX_URL}} > ./PROD_SFDX_URL.txt
          sfdx force:auth:sfdxurl:store -f ./PROD_SFDX_URL.txt -a devhub -d
          rm -f ./PROD_SFDX_URL.txt

      # Create scratch org
      - name: "Create scratch org"
        run: sfdx force:org:create -f config/project-scratch-def.json -a scratch-org -s -d 1

      # Install sfpowerkit plugin used to install multiple packages only by version number
      - name: "Install sfpowerkit plugin"
        run: "echo y | sfdx plugins:install sfpowerkit"

      # Get package keys
      - name: "Get package keys"
        id: install-keys
        run: |
          keys=""
          for p in $(jq '.result | .[].Name' -r <<< "$(sfdx force:package:list --json)"); do
              keys+=$p":${{ secrets.PACKAGE_KEY }} "
          done

          echo "::set-output name=keys::$(echo $keys)"

      # Install packages this repo is dependant on
      - name: "Install dependant packages"
        run: "sfdx sfpowerkit:package:dependencies:install -u scratch-org -r -a -w 60 -k '${{ steps.install-keys.outputs.keys }}'"

      # Deploy source to scratch org
      - name: "Push source to scratch org"
        run: "sfdx force:source:push"

      # Delete scratch orgs on errors
      - name: "Delete scratch org"
        if: failure()
        run: "sfdx force:org:delete -p -u scratch-org"

      # Set Scratch Org Auth URL
      - name: "Set scratch org auth URL"
        id: set-auth-url
        run: |
          authurl=$(sfdx force:org:display -u scratch-org --verbose --json | jq '.result.sfdxAuthUrl' | sed 's/\"//g')
          echo $authurl > SCRATCH_ORG_SFDX_AUTH_URL.txt

      # Upload SFDX AuthUrl
      - name: Upload SFDX AuthUrl
        uses: actions/upload-artifact@v2
        with:
          name: sfdx-auth-url
          path: SCRATCH_ORG_SFDX_AUTH_URL.txt

  # ######################################## #
  # ############### RUN TESTS ############## #
  # ######################################## #
  run-tests:
    name: Run Apex Tests
    needs: [compile]
    runs-on: ubuntu-latest
    steps:
      # Install SFDX
      - name: Install SFDX
        uses: sfdx-actions/setup-sfdx@v1

      # Checkout the code in the pull request
      - name: "Checkout source code"
        uses: actions/checkout@v2

      # Download SFDX AuthUrl from compile job
      - name: Download SFDX AuthUrl from compile job
        uses: actions/download-artifact@v2
        with:
          name: sfdx-auth-url

      # Authenticate scratch org
      - name: "Authenticate scratch org"
        run: |
          echo ${{ needs.compile.outputs.authurl }}
          authurl=${{ needs.compile.outputs.authurl }}
          echo $authurl > ./SCRATCH_ORG_SFDX_AUTH_URL.txt
          sfdx force:auth:sfdxurl:store -f ./SCRATCH_ORG_SFDX_AUTH_URL.txt -a scratch-org -s
          rm -f ./SCRATCH_ORG_SFDX_AUTH_URL.txt

      # Delete SFDX AuthUrl from compile job
      - name: Delete SFDX AuthUrl from compile job
        uses: geekyeggo/delete-artifact@v1
        with:
          name: sfdx-auth-url

      # Get all test classes from current repo
      - name: Get all test classes from current repo
        id: test-classes-in-repo
        run: |
          classes=""
          for p in $( grep -r -l -i --include="*.cls" "@istest" . | sed 's@.*/@@' ); do
            classes+=$(echo $p | cut -f 1 -d '.')","
          done

          echo "::set-output name=classes::$( echo $classes | sed 's/\(.*\),/\1 /' )"

      # Run Apex tests in scratch org
      - name: "Run Apex tests"
        run: "sfdx force:apex:test:run -t ${{ steps.test-classes-in-repo.outputs.classes }} -c -r human -d ./tests/apex -w 20"

      # Set code coverage percantage output
      - name: Set code coverage percantage output
        id: code-coverage-percentage
        run: |
          codecoverage=$(cat tests/apex/test-result-707*.json | jq '.summary.orgWideCoverage' | sed 's/\"//g; s/\%//g')
          echo "::set-output name=codecoverage::$(echo $codecoverage)"

      # Delete scratch orgs
      - name: "Delete scratch org"
        if: always()
        run: "sfdx force:org:delete -p -u scratch-org"

    outputs:
      codecoverage: ${{ steps.code-coverage-percentage.outputs.codecoverage }}

  # ######################################## #
  # ########## CHECK CODE COVERAGE ######### #
  # ######################################## #
  check-code-coverage:
    name: Validate 85% Code Coverage
    needs: [run-tests]
    runs-on: ubuntu-latest
    steps:
      # Validate at least 85% code coverage
      - name: Validate at least 85% code coverage
        run: |
          codecoverage=${{ needs.run-tests.outputs.codecoverage }}

          if [ $codecoverage -lt 85 ]
          then
            echo "Code coverage is $codecoverage%"
            echo "Because it is less than 85%, the validation failed"
            exit 125
          fi
